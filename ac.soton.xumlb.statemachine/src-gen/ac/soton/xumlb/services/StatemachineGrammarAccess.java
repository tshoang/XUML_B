/*
 * generated by Xtext 2.21.0
 */
package ac.soton.xumlb.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StatemachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTranslationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTranslationTranslationKindEnumRuleCall_3_0 = (RuleCall)cTranslationAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAnnotatesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cCommentAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cCommentEStringParserRuleCall_5_1_0 = (RuleCall)cCommentAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRefinesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRefinesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRefinesStatemachineCrossReference_6_1_0 = (CrossReference)cRefinesAssignment_6_1.eContents().get(0);
		private final RuleCall cRefinesStatemachineQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cRefinesStatemachineCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInstancesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInstancesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cInstancesEventBNamedCommentedElementCrossReference_7_1_0 = (CrossReference)cInstancesAssignment_7_1.eContents().get(0);
		private final RuleCall cInstancesEventBNamedCommentedElementQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cInstancesEventBNamedCommentedElementCrossReference_7_1_0.eContents().get(1);
		private final Keyword cSelfNameKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cSelfNameAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cSelfNameEStringParserRuleCall_7_3_0 = (RuleCall)cSelfNameAssignment_7_3.eContents().get(0);
		private final Assignment cNodesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNodesAbstractNodeParserRuleCall_8_0 = (RuleCall)cNodesAssignment_8.eContents().get(0);
		private final Assignment cTransitionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTransitionsTransitionParserRuleCall_9_0 = (RuleCall)cTransitionsAssignment_9.eContents().get(0);
		
		//Statemachine:
		//	'statemachine'
		//	name=ID '(' translation=TranslationKind ')' ('annotates' comment=EString)? ('refines'
		//	refines=[Statemachine|QualifiedName])? ('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
		//	'selfName' selfName=EString)?
		//	nodes+=AbstractNode*
		//	transitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }
		
		//'statemachine' name=ID '(' translation=TranslationKind ')' ('annotates' comment=EString)? ('refines'
		//refines=[Statemachine|QualifiedName])? ('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
		//'selfName' selfName=EString)? nodes+=AbstractNode* transitions+=Transition*
		public Group getGroup() { return cGroup; }
		
		//'statemachine'
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//translation=TranslationKind
		public Assignment getTranslationAssignment_3() { return cTranslationAssignment_3; }
		
		//TranslationKind
		public RuleCall getTranslationTranslationKindEnumRuleCall_3_0() { return cTranslationTranslationKindEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('annotates' comment=EString)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'annotates'
		public Keyword getAnnotatesKeyword_5_0() { return cAnnotatesKeyword_5_0; }
		
		//comment=EString
		public Assignment getCommentAssignment_5_1() { return cCommentAssignment_5_1; }
		
		//EString
		public RuleCall getCommentEStringParserRuleCall_5_1_0() { return cCommentEStringParserRuleCall_5_1_0; }
		
		//('refines' refines=[Statemachine|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'refines'
		public Keyword getRefinesKeyword_6_0() { return cRefinesKeyword_6_0; }
		
		//refines=[Statemachine|QualifiedName]
		public Assignment getRefinesAssignment_6_1() { return cRefinesAssignment_6_1; }
		
		//[Statemachine|QualifiedName]
		public CrossReference getRefinesStatemachineCrossReference_6_1_0() { return cRefinesStatemachineCrossReference_6_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesStatemachineQualifiedNameParserRuleCall_6_1_0_1() { return cRefinesStatemachineQualifiedNameParserRuleCall_6_1_0_1; }
		
		//('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName] 'selfName' selfName=EString)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'instances'
		public Keyword getInstancesKeyword_7_0() { return cInstancesKeyword_7_0; }
		
		//instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
		public Assignment getInstancesAssignment_7_1() { return cInstancesAssignment_7_1; }
		
		//[eventbcore::EventBNamedCommentedElement|QualifiedName]
		public CrossReference getInstancesEventBNamedCommentedElementCrossReference_7_1_0() { return cInstancesEventBNamedCommentedElementCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getInstancesEventBNamedCommentedElementQualifiedNameParserRuleCall_7_1_0_1() { return cInstancesEventBNamedCommentedElementQualifiedNameParserRuleCall_7_1_0_1; }
		
		//'selfName'
		public Keyword getSelfNameKeyword_7_2() { return cSelfNameKeyword_7_2; }
		
		//selfName=EString
		public Assignment getSelfNameAssignment_7_3() { return cSelfNameAssignment_7_3; }
		
		//EString
		public RuleCall getSelfNameEStringParserRuleCall_7_3_0() { return cSelfNameEStringParserRuleCall_7_3_0; }
		
		//nodes+=AbstractNode*
		public Assignment getNodesAssignment_8() { return cNodesAssignment_8; }
		
		//AbstractNode
		public RuleCall getNodesAbstractNodeParserRuleCall_8_0() { return cNodesAbstractNodeParserRuleCall_8_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_9() { return cTransitionsAssignment_9; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_9_0() { return cTransitionsTransitionParserRuleCall_9_0; }
	}
	public class AbstractNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.AbstractNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFinalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForkParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////
		////Annotation returns eventbcore::Annotation:
		////	{eventbcore::Annotation}
		//////	'references' references += [eventbcore::EventBObject|EString]
		////	'references' references += [ecore::EObject]
		////
		////
		//////	'source'  source = 'ac.soton.diagrams.translationTarget'
		//// //    'source'  source = Xsource
		////;	
		////Xsource returns ecore::EString:
		////	  STRING
		////;
		//AbstractNode:
		//	State | Initial | Final | Any | Junction | Fork;
		@Override public ParserRule getRule() { return rule; }
		
		//State | Initial | Final | Any | Junction | Fork
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }
		
		//Initial
		public RuleCall getInitialParserRuleCall_1() { return cInitialParserRuleCall_1; }
		
		//Final
		public RuleCall getFinalParserRuleCall_2() { return cFinalParserRuleCall_2; }
		
		//Any
		public RuleCall getAnyParserRuleCall_3() { return cAnyParserRuleCall_3; }
		
		//Junction
		public RuleCall getJunctionParserRuleCall_4() { return cJunctionParserRuleCall_4; }
		
		//Fork
		public RuleCall getForkParserRuleCall_5() { return cForkParserRuleCall_5; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElaboratesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElaboratesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cElaboratesEventCrossReference_1_1_0 = (CrossReference)cElaboratesAssignment_1_1.eContents().get(0);
		private final RuleCall cElaboratesEventQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cElaboratesEventCrossReference_1_1_0.eContents().get(1);
		private final Assignment cExtendedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cExtendedExtendedKeyword_2_0 = (Keyword)cExtendedAssignment_2.eContents().get(0);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceAbstractNodeCrossReference_4_0 = (CrossReference)cSourceAssignment_4.eContents().get(0);
		private final RuleCall cSourceAbstractNodeQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cSourceAbstractNodeCrossReference_4_0.eContents().get(1);
		private final Keyword cTargetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetAbstractNodeCrossReference_6_0 = (CrossReference)cTargetAssignment_6.eContents().get(0);
		private final RuleCall cTargetAbstractNodeQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cTargetAbstractNodeCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAnyKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cParametersAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_7_1_0 = (RuleCall)cParametersAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cParametersAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cParametersTypedParameterParserRuleCall_7_2_1_0 = (RuleCall)cParametersAssignment_7_2_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWhereKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cGuardsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cGuardsGuardParserRuleCall_8_1_0 = (RuleCall)cGuardsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cThenKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cActionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_9_1_0 = (RuleCall)cActionsAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cWithKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cWitnessesAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_10_1_0 = (RuleCall)cWitnessesAssignment_10_1.eContents().get(0);
		private final Keyword cEndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Transition:
		//	'transition' ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		//	//		('elaborates' elaborates+=[emachine::Event|EString]+)?
		//	extended?='extended'?
		//	//		('refines' refines=[coreextension::EventBEventGroup|EString])?
		//	'source' source=[AbstractNode|QualifiedName]
		//	'target' target=[AbstractNode|QualifiedName] ('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)?
		//	('where' guards+=Guard+)? ('then' actions+=Action+)? ('with' witnesses+=Witness+)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)? //		('elaborates' elaborates+=[emachine::Event|EString]+)?
		//extended?='extended'? //		('refines' refines=[coreextension::EventBEventGroup|EString])?
		//'source' source=[AbstractNode|QualifiedName] 'target' target=[AbstractNode|QualifiedName] ('any'
		//parameters+=TypedParameter (',' parameters+=TypedParameter)*)? ('where' guards+=Guard+)? ('then' actions+=Action+)?
		//('with' witnesses+=Witness+)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'elaborates'
		public Keyword getElaboratesKeyword_1_0() { return cElaboratesKeyword_1_0; }
		
		//elaborates+=[emachine::Event|QualifiedName]+
		public Assignment getElaboratesAssignment_1_1() { return cElaboratesAssignment_1_1; }
		
		//[emachine::Event|QualifiedName]
		public CrossReference getElaboratesEventCrossReference_1_1_0() { return cElaboratesEventCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getElaboratesEventQualifiedNameParserRuleCall_1_1_0_1() { return cElaboratesEventQualifiedNameParserRuleCall_1_1_0_1; }
		
		////		('elaborates' elaborates+=[emachine::Event|EString]+)?
		//extended?='extended'?
		public Assignment getExtendedAssignment_2() { return cExtendedAssignment_2; }
		
		//'extended'
		public Keyword getExtendedExtendedKeyword_2_0() { return cExtendedExtendedKeyword_2_0; }
		
		////		('refines' refines=[coreextension::EventBEventGroup|EString])?
		//'source'
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }
		
		//source=[AbstractNode|QualifiedName]
		public Assignment getSourceAssignment_4() { return cSourceAssignment_4; }
		
		//[AbstractNode|QualifiedName]
		public CrossReference getSourceAbstractNodeCrossReference_4_0() { return cSourceAbstractNodeCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getSourceAbstractNodeQualifiedNameParserRuleCall_4_0_1() { return cSourceAbstractNodeQualifiedNameParserRuleCall_4_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_5() { return cTargetKeyword_5; }
		
		//target=[AbstractNode|QualifiedName]
		public Assignment getTargetAssignment_6() { return cTargetAssignment_6; }
		
		//[AbstractNode|QualifiedName]
		public CrossReference getTargetAbstractNodeCrossReference_6_0() { return cTargetAbstractNodeCrossReference_6_0; }
		
		//QualifiedName
		public RuleCall getTargetAbstractNodeQualifiedNameParserRuleCall_6_0_1() { return cTargetAbstractNodeQualifiedNameParserRuleCall_6_0_1; }
		
		//('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'any'
		public Keyword getAnyKeyword_7_0() { return cAnyKeyword_7_0; }
		
		//parameters+=TypedParameter
		public Assignment getParametersAssignment_7_1() { return cParametersAssignment_7_1; }
		
		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_7_1_0() { return cParametersTypedParameterParserRuleCall_7_1_0; }
		
		//(',' parameters+=TypedParameter)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//parameters+=TypedParameter
		public Assignment getParametersAssignment_7_2_1() { return cParametersAssignment_7_2_1; }
		
		//TypedParameter
		public RuleCall getParametersTypedParameterParserRuleCall_7_2_1_0() { return cParametersTypedParameterParserRuleCall_7_2_1_0; }
		
		//('where' guards+=Guard+)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'where'
		public Keyword getWhereKeyword_8_0() { return cWhereKeyword_8_0; }
		
		//guards+=Guard+
		public Assignment getGuardsAssignment_8_1() { return cGuardsAssignment_8_1; }
		
		//Guard
		public RuleCall getGuardsGuardParserRuleCall_8_1_0() { return cGuardsGuardParserRuleCall_8_1_0; }
		
		//('then' actions+=Action+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'then'
		public Keyword getThenKeyword_9_0() { return cThenKeyword_9_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_9_1() { return cActionsAssignment_9_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_9_1_0() { return cActionsActionParserRuleCall_9_1_0; }
		
		//('with' witnesses+=Witness+)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'with'
		public Keyword getWithKeyword_10_0() { return cWithKeyword_10_0; }
		
		//witnesses+=Witness+
		public Assignment getWitnessesAssignment_10_1() { return cWitnessesAssignment_10_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_10_1_0() { return cWitnessesWitnessParserRuleCall_10_1_0; }
		
		//'end'
		public Keyword getEndKeyword_11() { return cEndKeyword_11; }
	}
	public class TypedParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.TypedParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeXTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TypedParameter coreextension::TypedParameter:
		//	name=ID ':' type=XType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=XType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=XType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//XType
		public RuleCall getTypeXTypeParserRuleCall_2_0() { return cTypeXTypeParserRuleCall_2_0; }
	}
	public class XTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.XType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXComplexTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMultiplicationSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cXComplexTypeParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//XType:
		//	XComplexType ('×' XComplexType)*;
		@Override public ParserRule getRule() { return rule; }
		
		////	XComplexType ('×' XType)*
		//XComplexType ('×' XComplexType)*
		public Group getGroup() { return cGroup; }
		
		////	XComplexType ('×' XType)*
		//XComplexType
		public RuleCall getXComplexTypeParserRuleCall_0() { return cXComplexTypeParserRuleCall_0; }
		
		//('×' XComplexType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'×'
		public Keyword getMultiplicationSignKeyword_1_0() { return cMultiplicationSignKeyword_1_0; }
		
		//XComplexType
		public RuleCall getXComplexTypeParserRuleCall_1_1() { return cXComplexTypeParserRuleCall_1_1; }
	}
	public class XComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.XComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDoubleStruckCapitalPKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cXTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cEVENT_B_BUILDIN_TYPEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XComplexType:
		//	'ℙ' '(' XType ')' | EVENT_B_BUILDIN_TYPE | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'ℙ' '(' XType ')' | EVENT_B_BUILDIN_TYPE | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ℙ' '(' XType ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'ℙ'
		public Keyword getDoubleStruckCapitalPKeyword_0_0() { return cDoubleStruckCapitalPKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//XType
		public RuleCall getXTypeParserRuleCall_0_2() { return cXTypeParserRuleCall_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//EVENT_B_BUILDIN_TYPE
		public RuleCall getEVENT_B_BUILDIN_TYPEParserRuleCall_1() { return cEVENT_B_BUILDIN_TYPEParserRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class EVENT_B_BUILDIN_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.EVENT_B_BUILDIN_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleStruckCapitalZKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EVENT_B_BUILDIN_TYPE:
		//	'BOOL' |
		//	'ℤ';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'ℤ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'ℤ'
		public Keyword getDoubleStruckCapitalZKeyword_1() { return cDoubleStruckCapitalZKeyword_1; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTheoremAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTheoremTheoremKeyword_0_0 = (Keyword)cTheoremAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXFormulaParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//Guard emachine::Guard:
		//	theorem?='theorem'? name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//theorem?='theorem'? name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_0() { return cTheoremAssignment_0; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_0_0() { return cTheoremTheoremKeyword_0_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_2_0() { return cPredicateXFormulaParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLABELTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionXFormulaParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//Action emachine::Action:
		//	name=XLABEL action=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//name=XLABEL action=XFormula
		public Group getGroup() { return cGroup; }
		
		//name=XLABEL
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_0_0() { return cNameXLABELTerminalRuleCall_0_0; }
		
		//action=XFormula
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//XFormula
		public RuleCall getActionXFormulaParserRuleCall_1_0() { return cActionXFormulaParserRuleCall_1_0; }
	}
	public class WitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Witness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameXLABELTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredicateXFormulaParserRuleCall_1_0 = (RuleCall)cPredicateAssignment_1.eContents().get(0);
		
		//Witness emachine::Witness:
		//	name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//name=XLABEL
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_0_0() { return cNameXLABELTerminalRuleCall_0_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_1() { return cPredicateAssignment_1; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_1_0() { return cPredicateXFormulaParserRuleCall_1_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRefinesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRefinesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRefinesStateCrossReference_2_1_0 = (CrossReference)cRefinesAssignment_2_1.eContents().get(0);
		private final RuleCall cRefinesStateQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cRefinesStateCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStatemachinesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cBeginKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStatemachinesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStatemachinesStatemachineParserRuleCall_3_2_0 = (RuleCall)cStatemachinesAssignment_3_2.eContents().get(0);
		private final Assignment cStatemachinesAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cStatemachinesStatemachineParserRuleCall_3_3_0 = (RuleCall)cStatemachinesAssignment_3_3.eContents().get(0);
		private final Keyword cEndKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInvariantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInvariantsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInvariantsInvariantParserRuleCall_4_1_0 = (RuleCall)cInvariantsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEntryActionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cEntryActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEntryActionsActionParserRuleCall_5_1_0 = (RuleCall)cEntryActionsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExitActionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExitActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExitActionsActionParserRuleCall_6_1_0 = (RuleCall)cExitActionsAssignment_6_1.eContents().get(0);
		
		//State:
		//	'State'
		//	name=EString ('refines' refines=[State|QualifiedName])? ('statemachines' 'begin' statemachines+=Statemachine
		//	statemachines+=Statemachine* 'end')? ('invariants' invariants+=Invariant+)? ('entryActions' entryActions+=Action+)?
		//	('exitActions' exitActions+=Action+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'State' name=EString ('refines' refines=[State|QualifiedName])? ('statemachines' 'begin' statemachines+=Statemachine
		//statemachines+=Statemachine* 'end')? ('invariants' invariants+=Invariant+)? ('entryActions' entryActions+=Action+)?
		//('exitActions' exitActions+=Action+)?
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('refines' refines=[State|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'refines'
		public Keyword getRefinesKeyword_2_0() { return cRefinesKeyword_2_0; }
		
		//refines=[State|QualifiedName]
		public Assignment getRefinesAssignment_2_1() { return cRefinesAssignment_2_1; }
		
		//[State|QualifiedName]
		public CrossReference getRefinesStateCrossReference_2_1_0() { return cRefinesStateCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getRefinesStateQualifiedNameParserRuleCall_2_1_0_1() { return cRefinesStateQualifiedNameParserRuleCall_2_1_0_1; }
		
		//('statemachines' 'begin' statemachines+=Statemachine statemachines+=Statemachine* 'end')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'statemachines'
		public Keyword getStatemachinesKeyword_3_0() { return cStatemachinesKeyword_3_0; }
		
		//'begin'
		public Keyword getBeginKeyword_3_1() { return cBeginKeyword_3_1; }
		
		//statemachines+=Statemachine
		public Assignment getStatemachinesAssignment_3_2() { return cStatemachinesAssignment_3_2; }
		
		//Statemachine
		public RuleCall getStatemachinesStatemachineParserRuleCall_3_2_0() { return cStatemachinesStatemachineParserRuleCall_3_2_0; }
		
		//statemachines+=Statemachine*
		public Assignment getStatemachinesAssignment_3_3() { return cStatemachinesAssignment_3_3; }
		
		//Statemachine
		public RuleCall getStatemachinesStatemachineParserRuleCall_3_3_0() { return cStatemachinesStatemachineParserRuleCall_3_3_0; }
		
		//'end'
		public Keyword getEndKeyword_3_4() { return cEndKeyword_3_4; }
		
		//('invariants' invariants+=Invariant+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_4_0() { return cInvariantsKeyword_4_0; }
		
		//invariants+=Invariant+
		public Assignment getInvariantsAssignment_4_1() { return cInvariantsAssignment_4_1; }
		
		//Invariant
		public RuleCall getInvariantsInvariantParserRuleCall_4_1_0() { return cInvariantsInvariantParserRuleCall_4_1_0; }
		
		//('entryActions' entryActions+=Action+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'entryActions'
		public Keyword getEntryActionsKeyword_5_0() { return cEntryActionsKeyword_5_0; }
		
		//entryActions+=Action+
		public Assignment getEntryActionsAssignment_5_1() { return cEntryActionsAssignment_5_1; }
		
		//Action
		public RuleCall getEntryActionsActionParserRuleCall_5_1_0() { return cEntryActionsActionParserRuleCall_5_1_0; }
		
		//('exitActions' exitActions+=Action+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'exitActions'
		public Keyword getExitActionsKeyword_6_0() { return cExitActionsKeyword_6_0; }
		
		//exitActions+=Action+
		public Assignment getExitActionsAssignment_6_1() { return cExitActionsAssignment_6_1; }
		
		//Action
		public RuleCall getExitActionsActionParserRuleCall_6_1_0() { return cExitActionsActionParserRuleCall_6_1_0; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTheoremAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTheoremTheoremKeyword_0_0 = (Keyword)cTheoremAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXFormulaParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//Invariant emachine::Invariant:
		//	theorem?='theorem'? name=XLABEL predicate=XFormula;
		@Override public ParserRule getRule() { return rule; }
		
		//theorem?='theorem'? name=XLABEL predicate=XFormula
		public Group getGroup() { return cGroup; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_0() { return cTheoremAssignment_0; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_0_0() { return cTheoremTheoremKeyword_0_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=XFormula
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XFormula
		public RuleCall getPredicateXFormulaParserRuleCall_2_0() { return cPredicateXFormulaParserRuleCall_2_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Initial:
		//	'Initial' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Initial' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Initial'
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class FinalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Final");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Final:
		//	'Final' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Final' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Final'
		public Keyword getFinalKeyword_0() { return cFinalKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class AnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Any");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Any:
		//	'Any' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Any' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Any'
		public Keyword getAnyKeyword_0() { return cAnyKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class JunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Junction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Junction:
		//	'Junction' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Junction' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Junction'
		public Keyword getJunctionKeyword_0() { return cJunctionKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Fork:
		//	'Fork' name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fork' name=EString
		public Group getGroup() { return cGroup; }
		
		//'Fork'
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class XFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.XFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XFormula:
		//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EVENTB_IDENTIFIER_KEYWORD
		public RuleCall getEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0() { return cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0; }
		
		//EVENTB_PREDICATE_SYMBOLS
		public RuleCall getEVENTB_PREDICATE_SYMBOLSParserRuleCall_1() { return cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1; }
		
		//EVENTB_EXPRESSION_SYMBOLS
		public RuleCall getEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2() { return cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class EVENTB_IDENTIFIER_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.EVENTB_IDENTIFIER_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCardKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDomKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFiniteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIdKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInterKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMaxKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMinKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cModKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPredKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPrj1Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cPrj2Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRanKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSuccKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUnionKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cDoubleStruckCapitalNDigitOneKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cDoubleStruckCapitalNKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cDoubleStruckCapitalPDigitOneKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cDoubleStruckCapitalPKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cDoubleStruckCapitalZKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		
		//EVENTB_IDENTIFIER_KEYWORD:
		//	'BOOL' |
		//	'FALSE' |
		//	'TRUE' |
		//	'bool' |
		//	'card' |
		//	'dom' |
		//	'finite' |
		//	'id' |
		//	'inter' |
		//	'max' |
		//	'min' |
		//	'mod' |
		//	'pred' |
		//	'prj1' |
		//	'prj2' |
		//	'ran' |
		//	'succ' |
		//	'union' |
		//	'ℕ1' |
		//	'ℕ' |
		//	'ℙ1' |
		//	'ℙ' |
		//	'ℤ';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'FALSE' | 'TRUE' | 'bool' | 'card' | 'dom' | 'finite' | 'id' | 'inter' | 'max' | 'min' | 'mod' | 'pred' |
		//'prj1' | 'prj2' | 'ran' | 'succ' | 'union' | 'ℕ1' | 'ℕ' | 'ℙ1' | 'ℙ' | 'ℤ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }
		
		//'bool'
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }
		
		//'card'
		public Keyword getCardKeyword_4() { return cCardKeyword_4; }
		
		//'dom'
		public Keyword getDomKeyword_5() { return cDomKeyword_5; }
		
		//'finite'
		public Keyword getFiniteKeyword_6() { return cFiniteKeyword_6; }
		
		//'id'
		public Keyword getIdKeyword_7() { return cIdKeyword_7; }
		
		//'inter'
		public Keyword getInterKeyword_8() { return cInterKeyword_8; }
		
		//'max'
		public Keyword getMaxKeyword_9() { return cMaxKeyword_9; }
		
		//'min'
		public Keyword getMinKeyword_10() { return cMinKeyword_10; }
		
		//'mod'
		public Keyword getModKeyword_11() { return cModKeyword_11; }
		
		//'pred'
		public Keyword getPredKeyword_12() { return cPredKeyword_12; }
		
		//'prj1'
		public Keyword getPrj1Keyword_13() { return cPrj1Keyword_13; }
		
		//'prj2'
		public Keyword getPrj2Keyword_14() { return cPrj2Keyword_14; }
		
		//'ran'
		public Keyword getRanKeyword_15() { return cRanKeyword_15; }
		
		//'succ'
		public Keyword getSuccKeyword_16() { return cSuccKeyword_16; }
		
		//'union'
		public Keyword getUnionKeyword_17() { return cUnionKeyword_17; }
		
		//'ℕ1'
		public Keyword getDoubleStruckCapitalNDigitOneKeyword_18() { return cDoubleStruckCapitalNDigitOneKeyword_18; }
		
		//'ℕ'
		public Keyword getDoubleStruckCapitalNKeyword_19() { return cDoubleStruckCapitalNKeyword_19; }
		
		//'ℙ1'
		public Keyword getDoubleStruckCapitalPDigitOneKeyword_20() { return cDoubleStruckCapitalPDigitOneKeyword_20; }
		
		//'ℙ'
		public Keyword getDoubleStruckCapitalPKeyword_21() { return cDoubleStruckCapitalPKeyword_21; }
		
		//'ℤ'
		public Keyword getDoubleStruckCapitalZKeyword_22() { return cDoubleStruckCapitalZKeyword_22; }
	}
	public class EVENTB_PREDICATE_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.EVENTB_PREDICATE_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftRightDoubleArrowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightwardsDoubleArrowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogicalAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLogicalOrKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDownTackKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUpTackKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cForAllKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cThereExistsKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNumberSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMiddleDotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cFullStopKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cNotEqualToKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLessThanOrEqualToKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cLessThanSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGreaterThanOrEqualToKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cGreaterThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cElementOfKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cColonKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cNotAnElementOfKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cSubsetOfKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cNotASubsetOfKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cSubsetOfOrEqualToKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cNeitherASubsetOfNorEqualToKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cPartitionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		
		//EVENTB_PREDICATE_SYMBOLS:
		//	'(' | // Predicate calculus symbols
		//	')' |
		//	'⇔' |
		//	'⇒' |
		//	'∧' | '&' |
		//	'∨' |
		//	'¬' |
		//	'⊤' |
		//	'⊥' |
		//	'∀' | '!' |
		//	'∃' | '#' |
		//	',' |
		//	'·' | '.' |
		//	'=' | // Build predicates from expressions
		//	'≠' |
		//	'≤' |
		//	'<' |
		//	'≥' |
		//	'>' |
		//	'∈' | ':' | // Include this for Rodin keyboard
		//	'∉' |
		//	'⊂' |
		//	'⊄' |
		//	'⊆' |
		//	'⊈' |
		//	'partition' // This is missing from the Rodin D7 deliverable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' | // Predicate calculus symbols
		//')' | '⇔' | '⇒' | '∧' | '&' | '∨' | '¬' | '⊤' | '⊥' | '∀' | '!' | '∃' | '#' | ',' | '·' | '.' | '=' | // Build predicates from expressions
		//'≠' | '≤' | '<' | '≥' | '>' | '∈' | ':' | // Include this for Rodin keyboard
		//'∉' | '⊂' | '⊄' | '⊆' | '⊈' | 'partition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//// Predicate calculus symbols
		//')'
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
		
		//'⇔'
		public Keyword getLeftRightDoubleArrowKeyword_2() { return cLeftRightDoubleArrowKeyword_2; }
		
		//'⇒'
		public Keyword getRightwardsDoubleArrowKeyword_3() { return cRightwardsDoubleArrowKeyword_3; }
		
		//'∧'
		public Keyword getLogicalAndKeyword_4() { return cLogicalAndKeyword_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//'∨'
		public Keyword getLogicalOrKeyword_6() { return cLogicalOrKeyword_6; }
		
		//'¬'
		public Keyword getNotSignKeyword_7() { return cNotSignKeyword_7; }
		
		//'⊤'
		public Keyword getDownTackKeyword_8() { return cDownTackKeyword_8; }
		
		//'⊥'
		public Keyword getUpTackKeyword_9() { return cUpTackKeyword_9; }
		
		//'∀'
		public Keyword getForAllKeyword_10() { return cForAllKeyword_10; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_11() { return cExclamationMarkKeyword_11; }
		
		//'∃'
		public Keyword getThereExistsKeyword_12() { return cThereExistsKeyword_12; }
		
		//'#'
		public Keyword getNumberSignKeyword_13() { return cNumberSignKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'·'
		public Keyword getMiddleDotKeyword_15() { return cMiddleDotKeyword_15; }
		
		//'.'
		public Keyword getFullStopKeyword_16() { return cFullStopKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//// Build predicates from expressions
		//'≠'
		public Keyword getNotEqualToKeyword_18() { return cNotEqualToKeyword_18; }
		
		//'≤'
		public Keyword getLessThanOrEqualToKeyword_19() { return cLessThanOrEqualToKeyword_19; }
		
		//'<'
		public Keyword getLessThanSignKeyword_20() { return cLessThanSignKeyword_20; }
		
		//'≥'
		public Keyword getGreaterThanOrEqualToKeyword_21() { return cGreaterThanOrEqualToKeyword_21; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_22() { return cGreaterThanSignKeyword_22; }
		
		//'∈'
		public Keyword getElementOfKeyword_23() { return cElementOfKeyword_23; }
		
		//':'
		public Keyword getColonKeyword_24() { return cColonKeyword_24; }
		
		//// Include this for Rodin keyboard
		//'∉'
		public Keyword getNotAnElementOfKeyword_25() { return cNotAnElementOfKeyword_25; }
		
		//'⊂'
		public Keyword getSubsetOfKeyword_26() { return cSubsetOfKeyword_26; }
		
		//'⊄'
		public Keyword getNotASubsetOfKeyword_27() { return cNotASubsetOfKeyword_27; }
		
		//'⊆'
		public Keyword getSubsetOfOrEqualToKeyword_28() { return cSubsetOfOrEqualToKeyword_28; }
		
		//'⊈'
		public Keyword getNeitherASubsetOfNorEqualToKeyword_29() { return cNeitherASubsetOfNorEqualToKeyword_29; }
		
		//'partition'
		public Keyword getPartitionKeyword_30() { return cPartitionKeyword_30; }
	}
	public class EVENTB_EXPRESSION_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.EVENTB_EXPRESSION_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftRightArrowKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateUseAreaE100Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrivateUseAreaE101Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrivateUseAreaE102Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRightwardsArrowWithVerticalStrokeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRightwardsArrowKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRightwardsArrowWithTailWithVerticalStrokeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightwardsArrowWithTailKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRightwardsTwoHeadedArrowKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRightwardsTwoHeadedArrowWithTailKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cRightwardsArrowFromBarKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cEmptySetKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIntersectionKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUnionKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSetMinusKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMultiplicationSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLeftSquareBracketKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cRightSquareBracketKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cPrivateUseAreaE103Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cRingOperatorKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cSemicolonKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cCircledTimesKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cParallelToKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cTildeOperatorKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cWhiteLeftPointingTriangleKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cZNotationDomainAntirestrictionKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cWhiteRightPointingTriangleKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cZNotationRangeAntirestrictionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cGreekSmallLetterLamdaKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Group cGroup_32 = (Group)cAlternatives.eContents().get(32);
		private final Keyword cPercentSignKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Keyword cNAryIntersectionKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Keyword cNAryUnionKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cDividesKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cTwoDotLeaderKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cPlusSignKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cMinusSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cHyphenMinusKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cAsteriskOperatorKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cAsteriskKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cDivisionSignKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cSolidusKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cCircumflexAccentKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cBackslashKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		
		//EVENTB_EXPRESSION_SYMBOLS:
		//	'↔' | // Symbols for building set of relations
		//	'' |
		//	'' |
		//	'' |
		//	'⇸' |
		//	'→' |
		//	'⤔' |
		//	'↣' |
		//	'⤀' |
		//	'↠' |
		//	'⤖' |
		//	'{' | // Symbols for manipulating sets
		//	'}' |
		//	'↦' |
		//	'∅' |
		//	'∩' |
		//	'∪' |
		//	'∖' |
		//	'×' |
		//	'[' | // Symbols for manipulating functions and relations
		//	']' |
		//	'' |
		//	'∘' |
		//	';' |
		//	'⊗' |
		//	'∥' |
		//	'∼' |
		//	'◁' |
		//	'⩤' |
		//	'▷' |
		//	'⩥' |
		//	'λ' | '%' // Symbols for quantified expressions
		//	'⋂' |
		//	'⋃' |
		//	'∣' |
		//	'‥' | // Symbols for arithmetic expressions
		//	'+' |
		//	'−' | '-' |
		//	'∗' | '*' |
		//	'÷' | '/' |
		//	'^' |
		//	'\\' // Allowed for LaTeX combos
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'↔' | // Symbols for building set of relations
		//'' | '' | '' | '⇸' | '→' | '⤔' | '↣' | '⤀' | '↠' | '⤖' | '{' | // Symbols for manipulating sets
		//'}' | '↦' | '∅' | '∩' | '∪' | '∖' | '×' | '[' | // Symbols for manipulating functions and relations
		//']' | '' | '∘' | ';' | '⊗' | '∥' | '∼' | '◁' | '⩤' | '▷' | '⩥' | 'λ' | '%' // Symbols for quantified expressions
		//'⋂' | '⋃' | '∣' | '‥' | // Symbols for arithmetic expressions
		//'+' | '−' | '-' | '∗' | '*' | '÷' | '/' | '^' | '\\'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'↔'
		public Keyword getLeftRightArrowKeyword_0() { return cLeftRightArrowKeyword_0; }
		
		//// Symbols for building set of relations
		//''
		public Keyword getPrivateUseAreaE100Keyword_1() { return cPrivateUseAreaE100Keyword_1; }
		
		//''
		public Keyword getPrivateUseAreaE101Keyword_2() { return cPrivateUseAreaE101Keyword_2; }
		
		//''
		public Keyword getPrivateUseAreaE102Keyword_3() { return cPrivateUseAreaE102Keyword_3; }
		
		//'⇸'
		public Keyword getRightwardsArrowWithVerticalStrokeKeyword_4() { return cRightwardsArrowWithVerticalStrokeKeyword_4; }
		
		//'→'
		public Keyword getRightwardsArrowKeyword_5() { return cRightwardsArrowKeyword_5; }
		
		//'⤔'
		public Keyword getRightwardsArrowWithTailWithVerticalStrokeKeyword_6() { return cRightwardsArrowWithTailWithVerticalStrokeKeyword_6; }
		
		//'↣'
		public Keyword getRightwardsArrowWithTailKeyword_7() { return cRightwardsArrowWithTailKeyword_7; }
		
		//'⤀'
		public Keyword getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8() { return cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8; }
		
		//'↠'
		public Keyword getRightwardsTwoHeadedArrowKeyword_9() { return cRightwardsTwoHeadedArrowKeyword_9; }
		
		//'⤖'
		public Keyword getRightwardsTwoHeadedArrowWithTailKeyword_10() { return cRightwardsTwoHeadedArrowWithTailKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//// Symbols for manipulating sets
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'↦'
		public Keyword getRightwardsArrowFromBarKeyword_13() { return cRightwardsArrowFromBarKeyword_13; }
		
		//'∅'
		public Keyword getEmptySetKeyword_14() { return cEmptySetKeyword_14; }
		
		//'∩'
		public Keyword getIntersectionKeyword_15() { return cIntersectionKeyword_15; }
		
		//'∪'
		public Keyword getUnionKeyword_16() { return cUnionKeyword_16; }
		
		//'∖'
		public Keyword getSetMinusKeyword_17() { return cSetMinusKeyword_17; }
		
		//'×'
		public Keyword getMultiplicationSignKeyword_18() { return cMultiplicationSignKeyword_18; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_19() { return cLeftSquareBracketKeyword_19; }
		
		//// Symbols for manipulating functions and relations
		//']'
		public Keyword getRightSquareBracketKeyword_20() { return cRightSquareBracketKeyword_20; }
		
		//''
		public Keyword getPrivateUseAreaE103Keyword_21() { return cPrivateUseAreaE103Keyword_21; }
		
		//'∘'
		public Keyword getRingOperatorKeyword_22() { return cRingOperatorKeyword_22; }
		
		//';'
		public Keyword getSemicolonKeyword_23() { return cSemicolonKeyword_23; }
		
		//'⊗'
		public Keyword getCircledTimesKeyword_24() { return cCircledTimesKeyword_24; }
		
		//'∥'
		public Keyword getParallelToKeyword_25() { return cParallelToKeyword_25; }
		
		//'∼'
		public Keyword getTildeOperatorKeyword_26() { return cTildeOperatorKeyword_26; }
		
		//'◁'
		public Keyword getWhiteLeftPointingTriangleKeyword_27() { return cWhiteLeftPointingTriangleKeyword_27; }
		
		//'⩤'
		public Keyword getZNotationDomainAntirestrictionKeyword_28() { return cZNotationDomainAntirestrictionKeyword_28; }
		
		//'▷'
		public Keyword getWhiteRightPointingTriangleKeyword_29() { return cWhiteRightPointingTriangleKeyword_29; }
		
		//'⩥'
		public Keyword getZNotationRangeAntirestrictionKeyword_30() { return cZNotationRangeAntirestrictionKeyword_30; }
		
		//'λ'
		public Keyword getGreekSmallLetterLamdaKeyword_31() { return cGreekSmallLetterLamdaKeyword_31; }
		
		//'%' // Symbols for quantified expressions
		//'⋂'
		public Group getGroup_32() { return cGroup_32; }
		
		//'%'
		public Keyword getPercentSignKeyword_32_0() { return cPercentSignKeyword_32_0; }
		
		//// Symbols for quantified expressions
		//'⋂'
		public Keyword getNAryIntersectionKeyword_32_1() { return cNAryIntersectionKeyword_32_1; }
		
		//'⋃'
		public Keyword getNAryUnionKeyword_33() { return cNAryUnionKeyword_33; }
		
		//'∣'
		public Keyword getDividesKeyword_34() { return cDividesKeyword_34; }
		
		//'‥'
		public Keyword getTwoDotLeaderKeyword_35() { return cTwoDotLeaderKeyword_35; }
		
		//// Symbols for arithmetic expressions
		//'+'
		public Keyword getPlusSignKeyword_36() { return cPlusSignKeyword_36; }
		
		//'−'
		public Keyword getMinusSignKeyword_37() { return cMinusSignKeyword_37; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_38() { return cHyphenMinusKeyword_38; }
		
		//'∗'
		public Keyword getAsteriskOperatorKeyword_39() { return cAsteriskOperatorKeyword_39; }
		
		//'*'
		public Keyword getAsteriskKeyword_40() { return cAsteriskKeyword_40; }
		
		//'÷'
		public Keyword getDivisionSignKeyword_41() { return cDivisionSignKeyword_41; }
		
		//'/'
		public Keyword getSolidusKeyword_42() { return cSolidusKeyword_42; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_43() { return cCircumflexAccentKeyword_43; }
		
		//'\\'
		public Keyword getBackslashKeyword_44() { return cBackslashKeyword_44; }
	}
	
	public class TranslationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.TranslationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIVAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIVARVariablesKeyword_0_0 = (Keyword)cMULTIVAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSINGLEVAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSINGLEVAREnumerationKeyword_1_0 = (Keyword)cSINGLEVAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFINEDVAREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFINEDVARREFINEDVARKeyword_2_0 = (Keyword)cREFINEDVAREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TranslationKind:
		//	MULTIVAR='variables' | SINGLEVAR='enumeration' | REFINEDVAR;
		public EnumRule getRule() { return rule; }
		
		//MULTIVAR='variables' | SINGLEVAR='enumeration' | REFINEDVAR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIVAR='variables'
		public EnumLiteralDeclaration getMULTIVAREnumLiteralDeclaration_0() { return cMULTIVAREnumLiteralDeclaration_0; }
		
		//'variables'
		public Keyword getMULTIVARVariablesKeyword_0_0() { return cMULTIVARVariablesKeyword_0_0; }
		
		//SINGLEVAR='enumeration'
		public EnumLiteralDeclaration getSINGLEVAREnumLiteralDeclaration_1() { return cSINGLEVAREnumLiteralDeclaration_1; }
		
		//'enumeration'
		public Keyword getSINGLEVAREnumerationKeyword_1_0() { return cSINGLEVAREnumerationKeyword_1_0; }
		
		//REFINEDVAR
		public EnumLiteralDeclaration getREFINEDVAREnumLiteralDeclaration_2() { return cREFINEDVAREnumLiteralDeclaration_2; }
		
		//'REFINEDVAR'
		public Keyword getREFINEDVARREFINEDVARKeyword_2_0() { return cREFINEDVARREFINEDVARKeyword_2_0; }
	}
	
	private final StatemachineElements pStatemachine;
	private final AbstractNodeElements pAbstractNode;
	private final EStringElements pEString;
	private final QualifiedNameElements pQualifiedName;
	private final TransitionElements pTransition;
	private final TranslationKindElements eTranslationKind;
	private final TypedParameterElements pTypedParameter;
	private final XTypeElements pXType;
	private final XComplexTypeElements pXComplexType;
	private final EVENT_B_BUILDIN_TYPEElements pEVENT_B_BUILDIN_TYPE;
	private final GuardElements pGuard;
	private final ActionElements pAction;
	private final WitnessElements pWitness;
	private final StateElements pState;
	private final InvariantElements pInvariant;
	private final InitialElements pInitial;
	private final FinalElements pFinal;
	private final AnyElements pAny;
	private final JunctionElements pJunction;
	private final ForkElements pFork;
	private final TerminalRule tXLABEL;
	private final XFormulaElements pXFormula;
	private final EVENTB_IDENTIFIER_KEYWORDElements pEVENTB_IDENTIFIER_KEYWORD;
	private final EVENTB_PREDICATE_SYMBOLSElements pEVENTB_PREDICATE_SYMBOLS;
	private final EVENTB_EXPRESSION_SYMBOLSElements pEVENTB_EXPRESSION_SYMBOLS;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatemachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStatemachine = new StatemachineElements();
		this.pAbstractNode = new AbstractNodeElements();
		this.pEString = new EStringElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pTransition = new TransitionElements();
		this.eTranslationKind = new TranslationKindElements();
		this.pTypedParameter = new TypedParameterElements();
		this.pXType = new XTypeElements();
		this.pXComplexType = new XComplexTypeElements();
		this.pEVENT_B_BUILDIN_TYPE = new EVENT_B_BUILDIN_TYPEElements();
		this.pGuard = new GuardElements();
		this.pAction = new ActionElements();
		this.pWitness = new WitnessElements();
		this.pState = new StateElements();
		this.pInvariant = new InvariantElements();
		this.pInitial = new InitialElements();
		this.pFinal = new FinalElements();
		this.pAny = new AnyElements();
		this.pJunction = new JunctionElements();
		this.pFork = new ForkElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.XLABEL");
		this.pXFormula = new XFormulaElements();
		this.pEVENTB_IDENTIFIER_KEYWORD = new EVENTB_IDENTIFIER_KEYWORDElements();
		this.pEVENTB_PREDICATE_SYMBOLS = new EVENTB_PREDICATE_SYMBOLSElements();
		this.pEVENTB_EXPRESSION_SYMBOLS = new EVENTB_EXPRESSION_SYMBOLSElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xumlb.Statemachine.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xumlb.Statemachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Statemachine:
	//	'statemachine'
	//	name=ID '(' translation=TranslationKind ')' ('annotates' comment=EString)? ('refines'
	//	refines=[Statemachine|QualifiedName])? ('instances' instances=[eventbcore::EventBNamedCommentedElement|QualifiedName]
	//	'selfName' selfName=EString)?
	//	nodes+=AbstractNode*
	//	transitions+=Transition*;
	public StatemachineElements getStatemachineAccess() {
		return pStatemachine;
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}
	
	////
	////Annotation returns eventbcore::Annotation:
	////	{eventbcore::Annotation}
	//////	'references' references += [eventbcore::EventBObject|EString]
	////	'references' references += [ecore::EObject]
	////
	////
	//////	'source'  source = 'ac.soton.diagrams.translationTarget'
	//// //    'source'  source = Xsource
	////;	
	////Xsource returns ecore::EString:
	////	  STRING
	////;
	//AbstractNode:
	//	State | Initial | Final | Any | Junction | Fork;
	public AbstractNodeElements getAbstractNodeAccess() {
		return pAbstractNode;
	}
	
	public ParserRule getAbstractNodeRule() {
		return getAbstractNodeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Transition:
	//	'transition' ('elaborates' elaborates+=[emachine::Event|QualifiedName]+)?
	//	//		('elaborates' elaborates+=[emachine::Event|EString]+)?
	//	extended?='extended'?
	//	//		('refines' refines=[coreextension::EventBEventGroup|EString])?
	//	'source' source=[AbstractNode|QualifiedName]
	//	'target' target=[AbstractNode|QualifiedName] ('any' parameters+=TypedParameter (',' parameters+=TypedParameter)*)?
	//	('where' guards+=Guard+)? ('then' actions+=Action+)? ('with' witnesses+=Witness+)?
	//	'end';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//enum TranslationKind:
	//	MULTIVAR='variables' | SINGLEVAR='enumeration' | REFINEDVAR;
	public TranslationKindElements getTranslationKindAccess() {
		return eTranslationKind;
	}
	
	public EnumRule getTranslationKindRule() {
		return getTranslationKindAccess().getRule();
	}
	
	//TypedParameter coreextension::TypedParameter:
	//	name=ID ':' type=XType;
	public TypedParameterElements getTypedParameterAccess() {
		return pTypedParameter;
	}
	
	public ParserRule getTypedParameterRule() {
		return getTypedParameterAccess().getRule();
	}
	
	//XType:
	//	XComplexType ('×' XComplexType)*;
	public XTypeElements getXTypeAccess() {
		return pXType;
	}
	
	public ParserRule getXTypeRule() {
		return getXTypeAccess().getRule();
	}
	
	//XComplexType:
	//	'ℙ' '(' XType ')' | EVENT_B_BUILDIN_TYPE | ID;
	public XComplexTypeElements getXComplexTypeAccess() {
		return pXComplexType;
	}
	
	public ParserRule getXComplexTypeRule() {
		return getXComplexTypeAccess().getRule();
	}
	
	//EVENT_B_BUILDIN_TYPE:
	//	'BOOL' |
	//	'ℤ';
	public EVENT_B_BUILDIN_TYPEElements getEVENT_B_BUILDIN_TYPEAccess() {
		return pEVENT_B_BUILDIN_TYPE;
	}
	
	public ParserRule getEVENT_B_BUILDIN_TYPERule() {
		return getEVENT_B_BUILDIN_TYPEAccess().getRule();
	}
	
	//Guard emachine::Guard:
	//	theorem?='theorem'? name=XLABEL predicate=XFormula;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//Action emachine::Action:
	//	name=XLABEL action=XFormula;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Witness emachine::Witness:
	//	name=XLABEL predicate=XFormula;
	public WitnessElements getWitnessAccess() {
		return pWitness;
	}
	
	public ParserRule getWitnessRule() {
		return getWitnessAccess().getRule();
	}
	
	//State:
	//	'State'
	//	name=EString ('refines' refines=[State|QualifiedName])? ('statemachines' 'begin' statemachines+=Statemachine
	//	statemachines+=Statemachine* 'end')? ('invariants' invariants+=Invariant+)? ('entryActions' entryActions+=Action+)?
	//	('exitActions' exitActions+=Action+)?;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Invariant emachine::Invariant:
	//	theorem?='theorem'? name=XLABEL predicate=XFormula;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//Initial:
	//	'Initial' name=EString;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Final:
	//	'Final' name=EString;
	public FinalElements getFinalAccess() {
		return pFinal;
	}
	
	public ParserRule getFinalRule() {
		return getFinalAccess().getRule();
	}
	
	//Any:
	//	'Any' name=EString;
	public AnyElements getAnyAccess() {
		return pAny;
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}
	
	//Junction:
	//	'Junction' name=EString;
	public JunctionElements getJunctionAccess() {
		return pJunction;
	}
	
	public ParserRule getJunctionRule() {
		return getJunctionAccess().getRule();
	}
	
	//Fork:
	//	'Fork' name=EString;
	public ForkElements getForkAccess() {
		return pFork;
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//XFormula:
	//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
	public XFormulaElements getXFormulaAccess() {
		return pXFormula;
	}
	
	public ParserRule getXFormulaRule() {
		return getXFormulaAccess().getRule();
	}
	
	//EVENTB_IDENTIFIER_KEYWORD:
	//	'BOOL' |
	//	'FALSE' |
	//	'TRUE' |
	//	'bool' |
	//	'card' |
	//	'dom' |
	//	'finite' |
	//	'id' |
	//	'inter' |
	//	'max' |
	//	'min' |
	//	'mod' |
	//	'pred' |
	//	'prj1' |
	//	'prj2' |
	//	'ran' |
	//	'succ' |
	//	'union' |
	//	'ℕ1' |
	//	'ℕ' |
	//	'ℙ1' |
	//	'ℙ' |
	//	'ℤ';
	public EVENTB_IDENTIFIER_KEYWORDElements getEVENTB_IDENTIFIER_KEYWORDAccess() {
		return pEVENTB_IDENTIFIER_KEYWORD;
	}
	
	public ParserRule getEVENTB_IDENTIFIER_KEYWORDRule() {
		return getEVENTB_IDENTIFIER_KEYWORDAccess().getRule();
	}
	
	//EVENTB_PREDICATE_SYMBOLS:
	//	'(' | // Predicate calculus symbols
	//	')' |
	//	'⇔' |
	//	'⇒' |
	//	'∧' | '&' |
	//	'∨' |
	//	'¬' |
	//	'⊤' |
	//	'⊥' |
	//	'∀' | '!' |
	//	'∃' | '#' |
	//	',' |
	//	'·' | '.' |
	//	'=' | // Build predicates from expressions
	//	'≠' |
	//	'≤' |
	//	'<' |
	//	'≥' |
	//	'>' |
	//	'∈' | ':' | // Include this for Rodin keyboard
	//	'∉' |
	//	'⊂' |
	//	'⊄' |
	//	'⊆' |
	//	'⊈' |
	//	'partition' // This is missing from the Rodin D7 deliverable
	//;
	public EVENTB_PREDICATE_SYMBOLSElements getEVENTB_PREDICATE_SYMBOLSAccess() {
		return pEVENTB_PREDICATE_SYMBOLS;
	}
	
	public ParserRule getEVENTB_PREDICATE_SYMBOLSRule() {
		return getEVENTB_PREDICATE_SYMBOLSAccess().getRule();
	}
	
	//EVENTB_EXPRESSION_SYMBOLS:
	//	'↔' | // Symbols for building set of relations
	//	'' |
	//	'' |
	//	'' |
	//	'⇸' |
	//	'→' |
	//	'⤔' |
	//	'↣' |
	//	'⤀' |
	//	'↠' |
	//	'⤖' |
	//	'{' | // Symbols for manipulating sets
	//	'}' |
	//	'↦' |
	//	'∅' |
	//	'∩' |
	//	'∪' |
	//	'∖' |
	//	'×' |
	//	'[' | // Symbols for manipulating functions and relations
	//	']' |
	//	'' |
	//	'∘' |
	//	';' |
	//	'⊗' |
	//	'∥' |
	//	'∼' |
	//	'◁' |
	//	'⩤' |
	//	'▷' |
	//	'⩥' |
	//	'λ' | '%' // Symbols for quantified expressions
	//	'⋂' |
	//	'⋃' |
	//	'∣' |
	//	'‥' | // Symbols for arithmetic expressions
	//	'+' |
	//	'−' | '-' |
	//	'∗' | '*' |
	//	'÷' | '/' |
	//	'^' |
	//	'\\' // Allowed for LaTeX combos
	//;
	public EVENTB_EXPRESSION_SYMBOLSElements getEVENTB_EXPRESSION_SYMBOLSAccess() {
		return pEVENTB_EXPRESSION_SYMBOLS;
	}
	
	public ParserRule getEVENTB_EXPRESSION_SYMBOLSRule() {
		return getEVENTB_EXPRESSION_SYMBOLSAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | 'i'..'\\u00D6' | '\\u00D8'..'ￜ') ('a'..'z' | 'A'..'Z' | '_' | 'i'..'\\u00D6' |
	//	'\\u00D8'..'ￜ' | '0'..'9' | "'")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
