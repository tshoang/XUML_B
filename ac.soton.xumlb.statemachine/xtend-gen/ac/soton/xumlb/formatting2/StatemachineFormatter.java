/**
 * generated by Xtext 2.14.0
 */
package ac.soton.xumlb.formatting2;

import ac.soton.eventb.emf.core.extension.coreextension.TypedParameter;
import ac.soton.eventb.statemachines.AbstractNode;
import ac.soton.eventb.statemachines.State;
import ac.soton.eventb.statemachines.Statemachine;
import ac.soton.eventb.statemachines.Transition;
import ac.soton.xumlb.services.StatemachineGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eventb.emf.core.machine.Action;
import org.eventb.emf.core.machine.Guard;
import org.eventb.emf.core.machine.Invariant;
import org.eventb.emf.core.machine.Witness;

/**
 * <p>
 * StatemachineFormatter contains custom formatting details
 * </p>
 * 
 * @author dd4g12
 * @since 1.0
 */
@SuppressWarnings("all")
public class StatemachineFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private StatemachineGrammarAccess _statemachineGrammarAccess;
  
  protected void _format(final Statemachine statemachine, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(statemachine).keyword("annotates"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(statemachine).keyword("refines"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(statemachine).keyword("instances"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.allRegionsFor(statemachine).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_3);
    EList<AbstractNode> _nodes = statemachine.getNodes();
    for (final AbstractNode abstractNode : _nodes) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<AbstractNode>prepend(document.<AbstractNode>format(abstractNode), _function_4);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(statemachine).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_5);
      }
    }
    EList<Transition> _transitions = statemachine.getTransitions();
    for (final Transition transition : _transitions) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Transition>prepend(document.<Transition>format(transition), _function_4);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(statemachine).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_5);
      }
    }
  }
  
  protected void _format(final Transition transition, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(transition).keyword("transition"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("elaborates"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("extended"), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("source"), _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("target"), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("any"), _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("where"), _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("then"), _function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("with"), _function_9);
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(transition).keyword("end"), _function_10);
    EList<TypedParameter> _parameters = transition.getParameters();
    for (final TypedParameter parameter : _parameters) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<TypedParameter>prepend(document.<TypedParameter>format(parameter), _function_11);
        final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(parameter).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_12);
      }
    }
    EList<Guard> _guards = transition.getGuards();
    for (final Guard guard : _guards) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Guard>prepend(document.<Guard>format(guard), _function_11);
        final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(guard).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_12);
      }
    }
    EList<Witness> _witnesses = transition.getWitnesses();
    for (final Witness witness : _witnesses) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Witness>prepend(document.<Witness>format(witness), _function_11);
        final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(witness).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_12);
      }
    }
    EList<Action> _actions = transition.getActions();
    for (final Action action : _actions) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Action>prepend(document.<Action>format(action), _function_11);
        final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(action).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_12);
      }
    }
    final ISemanticRegion first = this.textRegionExtensions.regionFor(transition).keyword("transition");
    final ISemanticRegion last = this.textRegionExtensions.regionFor(transition).keyword("end");
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.set(first.getNextHiddenRegion(), last.getPreviousHiddenRegion(), _function_11);
    boolean _isEmpty = transition.getParameters().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      final TypedParameter firstPar = IterableExtensions.<TypedParameter>head(transition.getParameters());
      final TypedParameter lastPar = IterableExtensions.<TypedParameter>last(transition.getParameters());
      final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstPar).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastPar).getNextHiddenRegion(), _function_12);
    }
    boolean _isEmpty_1 = transition.getGuards().isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      final Guard firstGrd = IterableExtensions.<Guard>head(transition.getGuards());
      final Guard lastGrd = IterableExtensions.<Guard>last(transition.getGuards());
      final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstGrd).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastGrd).getNextHiddenRegion(), _function_13);
    }
    boolean _isEmpty_2 = transition.getWitnesses().isEmpty();
    boolean _not_2 = (!_isEmpty_2);
    if (_not_2) {
      final Witness firstWit = IterableExtensions.<Witness>head(transition.getWitnesses());
      final Witness lastWit = IterableExtensions.<Witness>last(transition.getWitnesses());
      final Procedure1<IHiddenRegionFormatter> _function_14 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstWit).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastWit).getNextHiddenRegion(), _function_14);
    }
    boolean _isEmpty_3 = transition.getActions().isEmpty();
    boolean _not_3 = (!_isEmpty_3);
    if (_not_3) {
      final Action firstAct = IterableExtensions.<Action>head(transition.getActions());
      final Procedure1<IHiddenRegionFormatter> _function_15 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      final Action lastAct = document.<Action>append(IterableExtensions.<Action>last(transition.getActions()), _function_15);
      final Procedure1<IHiddenRegionFormatter> _function_16 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstAct).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastAct).getNextHiddenRegion(), _function_16);
    }
    final Procedure1<IHiddenRegionFormatter> _function_17 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.allRegionsFor(transition).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_17);
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(state).keyword("State"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(state).keyword("refines"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(state).keyword("invariants"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(state).keyword("entryActions"), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(state).keyword("exitActions"), _function_4);
    EList<Statemachine> _statemachines = state.getStatemachines();
    for (final Statemachine sm : _statemachines) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Statemachine>prepend(document.<Statemachine>format(sm), _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(sm).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_6);
      }
    }
    EList<Invariant> _invariants = state.getInvariants();
    for (final Invariant inv : _invariants) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Invariant>prepend(document.<Invariant>format(inv), _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(inv).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_6);
      }
    }
    EList<Action> _entryActions = state.getEntryActions();
    for (final Action entry : _entryActions) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Action>prepend(document.<Action>format(entry), _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(entry).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_6);
      }
    }
    EList<Action> _exitActions = state.getExitActions();
    for (final Action exit : _exitActions) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Action>prepend(document.<Action>format(exit), _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(this.textRegionExtensions.allRegionsFor(exit).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_6);
      }
    }
    boolean _isEmpty = state.getStatemachines().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      final Statemachine firstSm = IterableExtensions.<Statemachine>head(state.getStatemachines());
      final Statemachine lastSm = IterableExtensions.<Statemachine>last(state.getStatemachines());
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstSm).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastSm).getNextHiddenRegion(), _function_5);
    }
    boolean _isEmpty_1 = state.getEntryActions().isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      final Statemachine firstEntry = IterableExtensions.<Statemachine>head(state.getStatemachines());
      final Statemachine lastEntry = IterableExtensions.<Statemachine>last(state.getStatemachines());
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstEntry).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastEntry).getNextHiddenRegion(), _function_6);
    }
    boolean _isEmpty_2 = state.getExitActions().isEmpty();
    boolean _not_2 = (!_isEmpty_2);
    if (_not_2) {
      final Statemachine firstExit = IterableExtensions.<Statemachine>head(state.getStatemachines());
      final Statemachine lastExit = IterableExtensions.<Statemachine>last(state.getStatemachines());
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(firstExit).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(lastExit).getNextHiddenRegion(), _function_7);
    }
    boolean _isEmpty_3 = state.getInvariants().isEmpty();
    boolean _not_3 = (!_isEmpty_3);
    if (_not_3) {
      final Invariant first = IterableExtensions.<Invariant>head(state.getInvariants());
      final Invariant last = IterableExtensions.<Invariant>last(state.getInvariants());
      final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.set(this.textRegionExtensions.regionForEObject(first).getPreviousHiddenRegion(), this.textRegionExtensions.regionForEObject(last).getNextHiddenRegion(), _function_8);
    }
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.allRegionsFor(state).ruleCallTo(this._statemachineGrammarAccess.getML_COMMENTRule()), _function_9);
  }
  
  public void format(final Object state, final IFormattableDocument document) {
    if (state instanceof State) {
      _format((State)state, document);
      return;
    } else if (state instanceof Statemachine) {
      _format((Statemachine)state, document);
      return;
    } else if (state instanceof Transition) {
      _format((Transition)state, document);
      return;
    } else if (state instanceof XtextResource) {
      _format((XtextResource)state, document);
      return;
    } else if (state instanceof EObject) {
      _format((EObject)state, document);
      return;
    } else if (state == null) {
      _format((Void)null, document);
      return;
    } else if (state != null) {
      _format(state, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(state, document).toString());
    }
  }
}
